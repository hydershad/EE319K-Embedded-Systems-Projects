;****************** main.s ***************
; Program written by: HYDER SHAD, MIRA SEHGAL
; Date Created: 1/22/2016 
; Last Modified: 3/2/2016 
; Section: THURSDAY 2-3 PM
; Instructor: V. JANAPA
; Lab number: 4
; Brief description of the program
;   If the switch is presses, the LED toggles at 8 Hz
; Hardware connections
;  PE1 is switch input  (1 means pressed, 0 means not pressed)
;  PE0 is LED output (1 activates external LED on protoboard) 
;Overall functionality of this system is the similar to Lab 3, with three changes:
;1-  initialize SysTick with RELOAD 0x00FFFFFF
;2-  add a heartbeat to PF2 that toggles every time through loop 
;3-  add debugging dump of input, output, and time
; Operation
;	1) Make PE0 an output and make PE1 an input. 
;	2) The system starts with the LED on (make PE0 =1). 
;   3) Wait about 62 ms
;   4) If the switch is pressed (PE1 is 1), then toggle the LED once, else turn the LED on. 
;   5) Steps 3 and 4 are repeated over and over


SWITCH                  EQU 0x40024004  ;PE0
LED                     EQU 0x40024008  ;PE1
SYSCTL_RCGCGPIO_R       EQU 0x400FE608
SYSCTL_RCGC2_GPIOE      EQU 0x00000010   ; port E Clock Gating Control
SYSCTL_RCGC2_GPIOF      EQU 0x00000020   ; port F Clock Gating Control
heartcount EQU 992000	;calculated for lab 4 heart beat (62ms delay running on 80MHz clock frequency)
GPIO_PORTE_DATA_R       EQU   0x400243FC
GPIO_PORTE_DIR_R        EQU   0x40024400
GPIO_PORTE_AFSEL_R      EQU   0x40024420
GPIO_PORTE_DEN_R        EQU   0x4002451C
GPIO_PORTE_PCTL_R       EQU   0x4002452C
GPIO_PORTF_DATA_R       EQU 0x400253FC
GPIO_PORTF_DIR_R        EQU 0x40025400
GPIO_PORTF_AFSEL_R      EQU 0x40025420
GPIO_PORTF_DEN_R        EQU 0x4002551C
GPIO_PORTF_PCTL_R  		EQU 0x4002552C
NVIC_ST_CTRL_R          EQU 0xE000E010
NVIC_ST_RELOAD_R        EQU 0xE000E014
NVIC_ST_CURRENT_R       EQU 0xE000E018
           THUMB
           AREA    DATA, ALIGN=4
SIZE       EQU    50
;You MUST use these two buffers and two variables
;You MUST not change their names
;These names MUST be exported
           EXPORT DataBuffer  
           EXPORT TimeBuffer  
           EXPORT DataPt [DATA,SIZE=4] 
           EXPORT TimePt [DATA,SIZE=4]
DataBuffer SPACE  SIZE*4
TimeBuffer SPACE  SIZE*4
DataPt     SPACE  4
TimePt     SPACE  4

      ALIGN          
      AREA    |.text|, CODE, READONLY, ALIGN=2
      THUMB
      EXPORT  Start
      IMPORT  TExaS_Init
	 
INITPORTS

;1) activate clock for Port E
    LDR R0, =SYSCTL_RCGCGPIO_R      
    LDR R1, [R0]                    
    ORR R1, #0X10						;SET BIT 4 HIGH TO ENABLE PORT E CLOCK	
    STR R1, [R0]                    
    NOP
    NOP                             	;ALLOW TIME TO FINISH ACTIVATING (2+ CYCLES)
    NOP

; 2) set direction register
	
	LDR R0, =GPIO_PORTE_DIR_R      		;SET BIT 3 HIGH FOR  TO BE OUTPUT
	LDR R1, [R0]
	ORR R1, #0X01						;using pin PE0 as output, PE1 as input
	STR R1, [R0]       
   
; 4) configure as GPIO
    
	LDR R0, =GPIO_PORTE_PCTL_R              
    MOV R1, #0X0             			;CLEAR PORT CONTROL FIELD TO SET UP PINS FOR GPIO
    STR R1, [R0]                   
	
; 5) regular port function
    
	LDR R0, =GPIO_PORTE_AFSEL_R     	;DISABLE ALT FUNCTIONS FOR BIN BY SETTING BITS TO ZERO
    MOV R1, #0               
    STR R1, [R0]
	
; 6) enable digital port

	LDR R0, =GPIO_PORTE_DEN_R       	;R1 = &GPIO_PORTD_DEN_R
    ORR R1, #0X03               		;ENABLE DIGITAL I/O ON PINS 0 and 1
    STR R1, [R0]
;----------------------------------------------------------------------------------------
; 1) activate clock for Port F
    LDR R0, =SYSCTL_RCGCGPIO_R      
    LDR R1, [R0]                    
    ORR R1, #0X20						;SET BIT 5 HIGH TO ENABLE PORT F CLOCK	
    STR R1, [R0]                    
    NOP
    NOP                             	;ALLOW TIME TO FINISH ACTIVATING (2+ CYCLES)
    NOP
	
; 3) set direction register
	
	LDR R0, =GPIO_PORTF_DIR_R      		;SET BIT 2 HIGH FOR IT TO BE OUTPUT
	LDR R1, [R0]
	ORR R1, #0X04
	STR R1, [R0]
	
; 5) configure as GPIO
    
	LDR R0, =GPIO_PORTF_PCTL_R              
    MOV R1, #0X0             			;CLEAR PORT CONTROL FIELD TO SET UP PINS FOR GPIO
    STR R1, [R0]                  
	
; 6) regular port function
    
	LDR R0, =GPIO_PORTF_AFSEL_R     	;DISABLE ALT FUNCTIONS FOR PIN BY SETTING BITS TO ZERO
    MOV R1, #0
    STR R1, [R0]
	
; 7) enable digital port

	LDR R0, =GPIO_PORTF_DEN_R       	;R1 = &GPIO_PORTD_DEN_R
    ORR R1, #0X04              			;ENABLE DIGITAL I/O ON PIN 2
    STR R1, [R0]

; exit initialization process
	BX LR

Start BL   TExaS_Init  ; running at 80 MHz, scope voltmeter on PD3
; initialize Port E and F
	BL INITPORTS
; initialize debugging dump, including SysTick
	BL Debug_Init

    CPSIE  I    ; TExaS voltmeter, scope runs on interrupts 	
;-----------------------END INITIALIZATION---------------------------------------------------------------	
;LAB 3 CODE WITH CAPTURE	

		MOV R3, #0 						;RESET ARRAY POINTERS
		LDR R0, =GPIO_PORTE_DATA_R 		;load R0 with address of Port E data (memory mapped I/O)
		LDR R1, [R0] 					;load Port E data into R1		
		ORR R1, #0X01					;set bit 0 (PE0) HIGH to turn on LED (positive logic)	
		STR R1, [R0]					;write modified data back to memory mapped I/O
		
		;HEARTBEAT	  
loop	LDR R1, =GPIO_PORTF_DATA_R	;HEARTBEAT TOGGLE CODE	
		LDR R2, [R1]
		EOR R2, #0X04
		STR R2, [R1]
		BL heartdelay
				
		LDR R1, [R0]					;load data into R0	
		CMP R1, #0X03					;check to see if the switch has been pressed, bit 1 HIGH means pressed, toggle led
		BNE noswitch						;if switch pressed 	
		EOR R1, #0X01					;EOR to turn TOGGLE LED	
		STR R1, [R0]					;write modified data back to memory mapped I/O to turn LED off
		B done						
noswitch ORR R1, #0X01					;SWITCH NOT PRESSED LED ON
		STR R1, [R0]
										;CAPTURE SECTION
done	CMP R3, #200
		BEQ FULL						;IF ARRAY FULL, SKIP DATA CAPTURE	
		BL Debug_Capture				;RECORD DATA
FULL	B loop
							;loop to check for switch press	
		
;----------------------------Delay Functions------------------------------------------------------------

						;exit delay subroutine, use link register to return to main program code

heartdelay LDR R8, =heartcount			;time delay, count down from calculated value for 80 MHz Clock, with delay taking 5 cycles each time					
count2	ADD R8, #-1						;subtract 1 from countdown					
		CMP R8, #0						;compare to see if countdown has reached 0
		BNE count2						;countdown = 0, then exit delay subroutine, otherwise loop to count
		BX LR
;input PE1 test output PE0
	

;------------------------------Debug_Init---------------------------------------------------------------------
; Initializes the debugging instrument
; Input: none
; Output: none
; Modifies: none
; Note: push/pop an even number of registers so C compiler is happy			
;SET UP DATA AND TIME ARRAYS WITH STARTING VALUES

Debug_Init
			LDR R0, =DataBuffer
			LDR R1, =TimeBuffer
			LDR R2, =DataPt 			;ALSO SERVING AS TIME POINTER, MAKES LIFE EASIER
			MOV R3, #0
			STR R3, [R2]
			MOV R4, #0XFFFFFFFF
ARRAYINIT	STR R4, [R0, R3]
			STR R4, [R1, R3]
			ADD R3, #4
			STR R3, [R2]
			CMP R3, #200
			BNE ARRAYINIT
			
			; init SysTick
			LDR R0, =NVIC_ST_CTRL_R
			LDR R1, [R0]
			AND R1, #~0X01
			STR R1, [R0]
	
			LDR R0, =NVIC_ST_RELOAD_R
			LDR R1, [R0]
			ORR R1, #0X00FFFFFF
			STR R1, [R0]

			LDR R0, =NVIC_ST_CURRENT_R
			MOV R1, #0
			STR R1, [R0]
			
			LDR R0, =NVIC_ST_CTRL_R
			LDR R1, [R0]
			ORR R1, #0X05 ; ENABLE AND SET CLOCK SOURCE BIT HIGH
			STR R1, [R0]
			
			BX LR

;------------------------------Debug_Capture--------------------------------------------

; Dump Port E and time into buffers
; Input: none
; Output: none
; Modifies: none
; Note: push/pop an even number of registers so C compiler is happy

;DEBUG CAPTURE INTRUSIVENESS CALCULATIONS:
;debug capture is 13 instructions, which using approximation of 2 cycles per instruction means subroutine is 26 cycles or .325us long
;there are 5000061 cycles executed between calls, which at 12.5ns/cycle is 0.0625007625s in between debug capture subroutine calls
;percentage overhead is 100x(0.325us/0.0625007625s) = 0.000519993656%, which by our definitions is considered a minimally intrusive debugging method

Debug_Capture
	  ;DO NOT CHANGE R0, R3 IS A PASS PARAMETER THAAT HOLDS POINTER VALUE
	  ;NO LDR DATA PORT ADDRESS SINCE R0 FROM MAIN CODE ALREADY HAS IT, DO NOT MODIFY R0
	  PUSH {R4-R6, LR} 				;SAVE REGISTERS TO STACK
	  LDR R4, =DataBuffer
	  LDR R5, =TimeBuffer
	  LDR R1, [R0]
	  AND R2, R1, #0X02
	  AND R1, #~0X02
	  LSL R2, #3
	  ADD R1, R2, R1
	  STR R1, [R4, R3] 				;STORE DATA IN DATA ARRAY
	  LDR R1, =NVIC_ST_CURRENT_R
	  LDR R1, [R1]
	  STR R1, [R5, R3] 				;STORE TIME IN TIME ARRAY
      ADD R3, #4    				;INCREMENT POINTER FOR BOTH ARRAYS
	  POP {R4-R6, PC}
	  
;------------------------End------------------------------------------------------------
    ALIGN                           ; make sure the end of this section is aligned
    END                             ; end of file